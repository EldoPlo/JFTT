//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from z1.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="Iz1Listener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class z1BaseListener : Iz1Listener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="z1Parser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLine([NotNull] z1Parser.LineContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="z1Parser.line"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLine([NotNull] z1Parser.LineContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAdd([NotNull] z1Parser.AddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Add</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAdd([NotNull] z1Parser.AddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Divide</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivide([NotNull] z1Parser.DivideContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Divide</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivide([NotNull] z1Parser.DivideContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumber([NotNull] z1Parser.NumberContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Number</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumber([NotNull] z1Parser.NumberContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Multiply</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMultiply([NotNull] z1Parser.MultiplyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Multiply</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMultiply([NotNull] z1Parser.MultiplyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Subtract</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubtract([NotNull] z1Parser.SubtractContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Subtract</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubtract([NotNull] z1Parser.SubtractContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegate([NotNull] z1Parser.NegateContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Negate</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegate([NotNull] z1Parser.NegateContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Parentheses</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParentheses([NotNull] z1Parser.ParenthesesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Parentheses</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParentheses([NotNull] z1Parser.ParenthesesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterPower([NotNull] z1Parser.PowerContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>Power</c>
	/// labeled alternative in <see cref="z1Parser.expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitPower([NotNull] z1Parser.PowerContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NegPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNegPow([NotNull] z1Parser.NegPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NegPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNegPow([NotNull] z1Parser.NegPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ParenthesesPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParenthesesPow([NotNull] z1Parser.ParenthesesPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ParenthesesPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParenthesesPow([NotNull] z1Parser.ParenthesesPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>SubPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSubPow([NotNull] z1Parser.SubPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>SubPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSubPow([NotNull] z1Parser.SubPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>MulPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulPow([NotNull] z1Parser.MulPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>MulPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulPow([NotNull] z1Parser.MulPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>AddPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddPow([NotNull] z1Parser.AddPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>AddPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddPow([NotNull] z1Parser.AddPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumPow([NotNull] z1Parser.NumPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumPow([NotNull] z1Parser.NumPowContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>DivPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDivPow([NotNull] z1Parser.DivPowContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>DivPow</c>
	/// labeled alternative in <see cref="z1Parser.powexpr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDivPow([NotNull] z1Parser.DivPowContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
