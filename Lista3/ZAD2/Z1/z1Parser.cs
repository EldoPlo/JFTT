//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from z1.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class z1Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, NUM=2, ADD=3, SUB=4, MUL=5, DIV=6, POW=7, LPAREN=8, RPAREN=9, 
		WS=10;
	public const int
		RULE_line = 0, RULE_expr = 1, RULE_powexpr = 2;
	public static readonly string[] ruleNames = {
		"line", "expr", "powexpr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'^'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "NUM", "ADD", "SUB", "MUL", "DIV", "POW", "LPAREN", "RPAREN", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "z1.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static z1Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public z1Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public z1Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(z1Parser.Eof, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 0, RULE_line);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6;
			expr(0);
			State = 7;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(z1Parser.ADD, 0); }
		public AddContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
	}
	public partial class DivideContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(z1Parser.DIV, 0); }
		public DivideContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterDivide(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitDivide(this);
		}
	}
	public partial class NumberContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(z1Parser.NUM, 0); }
		public NumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}
	public partial class MultiplyContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(z1Parser.MUL, 0); }
		public MultiplyContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterMultiply(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitMultiply(this);
		}
	}
	public partial class SubtractContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(z1Parser.SUB, 0); }
		public SubtractContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterSubtract(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitSubtract(this);
		}
	}
	public partial class NegateContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(z1Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterNegate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitNegate(this);
		}
	}
	public partial class ParenthesesContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(z1Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(z1Parser.RPAREN, 0); }
		public ParenthesesContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
	}
	public partial class PowerContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POW() { return GetToken(z1Parser.POW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr() {
			return GetRuleContext<PowexprContext>(0);
		}
		public PowerContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterPower(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitPower(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
				{
				_localctx = new NegateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 10;
				Match(SUB);
				State = 11;
				expr(3);
				}
				break;
			case NUM:
				{
				_localctx = new NumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12;
				Match(NUM);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13;
				Match(LPAREN);
				State = 14;
				expr(0);
				State = 15;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 34;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new AddContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 19;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 20;
						Match(ADD);
						State = 21;
						expr(9);
						}
						break;
					case 2:
						{
						_localctx = new SubtractContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 22;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 23;
						Match(SUB);
						State = 24;
						expr(8);
						}
						break;
					case 3:
						{
						_localctx = new MultiplyContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 25;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 26;
						Match(MUL);
						State = 27;
						expr(7);
						}
						break;
					case 4:
						{
						_localctx = new DivideContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 28;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 29;
						Match(DIV);
						State = 30;
						expr(6);
						}
						break;
					case 5:
						{
						_localctx = new PowerContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 31;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 32;
						Match(POW);
						State = 33;
						powexpr(0);
						}
						break;
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowexprContext : ParserRuleContext {
		public PowexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powexpr; } }
	 
		public PowexprContext() { }
		public virtual void CopyFrom(PowexprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NegPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(z1Parser.SUB, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr() {
			return GetRuleContext<PowexprContext>(0);
		}
		public NegPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterNegPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitNegPow(this);
		}
	}
	public partial class ParenthesesPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(z1Parser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr() {
			return GetRuleContext<PowexprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(z1Parser.RPAREN, 0); }
		public ParenthesesPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterParenthesesPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitParenthesesPow(this);
		}
	}
	public partial class SubPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext[] powexpr() {
			return GetRuleContexts<PowexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr(int i) {
			return GetRuleContext<PowexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUB() { return GetToken(z1Parser.SUB, 0); }
		public SubPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterSubPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitSubPow(this);
		}
	}
	public partial class MulPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext[] powexpr() {
			return GetRuleContexts<PowexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr(int i) {
			return GetRuleContext<PowexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUL() { return GetToken(z1Parser.MUL, 0); }
		public MulPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterMulPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitMulPow(this);
		}
	}
	public partial class AddPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext[] powexpr() {
			return GetRuleContexts<PowexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr(int i) {
			return GetRuleContext<PowexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD() { return GetToken(z1Parser.ADD, 0); }
		public AddPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterAddPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitAddPow(this);
		}
	}
	public partial class NumPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(z1Parser.NUM, 0); }
		public NumPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterNumPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitNumPow(this);
		}
	}
	public partial class DivPowContext : PowexprContext {
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext[] powexpr() {
			return GetRuleContexts<PowexprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PowexprContext powexpr(int i) {
			return GetRuleContext<PowexprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(z1Parser.DIV, 0); }
		public DivPowContext(PowexprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.EnterDivPow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			Iz1Listener typedListener = listener as Iz1Listener;
			if (typedListener != null) typedListener.ExitDivPow(this);
		}
	}

	[RuleVersion(0)]
	public PowexprContext powexpr() {
		return powexpr(0);
	}

	private PowexprContext powexpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PowexprContext _localctx = new PowexprContext(Context, _parentState);
		PowexprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_powexpr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUB:
				{
				_localctx = new NegPowContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 40;
				Match(SUB);
				State = 41;
				powexpr(3);
				}
				break;
			case NUM:
				{
				_localctx = new NumPowContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42;
				Match(NUM);
				}
				break;
			case LPAREN:
				{
				_localctx = new ParenthesesPowContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43;
				Match(LPAREN);
				State = 44;
				powexpr(0);
				State = 45;
				Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 63;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 61;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new AddPowContext(new PowexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_powexpr);
						State = 49;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 50;
						Match(ADD);
						State = 51;
						powexpr(8);
						}
						break;
					case 2:
						{
						_localctx = new SubPowContext(new PowexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_powexpr);
						State = 52;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 53;
						Match(SUB);
						State = 54;
						powexpr(7);
						}
						break;
					case 3:
						{
						_localctx = new MulPowContext(new PowexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_powexpr);
						State = 55;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 56;
						Match(MUL);
						State = 57;
						powexpr(6);
						}
						break;
					case 4:
						{
						_localctx = new DivPowContext(new PowexprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_powexpr);
						State = 58;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 59;
						Match(DIV);
						State = 60;
						powexpr(5);
						}
						break;
					}
					} 
				}
				State = 65;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		case 2: return powexpr_sempred((PowexprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 8);
		case 1: return Precpred(Context, 7);
		case 2: return Precpred(Context, 6);
		case 3: return Precpred(Context, 5);
		case 4: return Precpred(Context, 4);
		}
		return true;
	}
	private bool powexpr_sempred(PowexprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 7);
		case 6: return Precpred(Context, 6);
		case 7: return Precpred(Context, 5);
		case 8: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,10,67,2,0,7,0,2,1,7,1,2,2,7,2,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,3,1,18,8,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,5,1,35,8,1,10,1,12,1,38,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
		2,48,8,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,62,8,2,10,
		2,12,2,65,9,2,1,2,0,2,2,4,3,0,2,4,0,0,76,0,6,1,0,0,0,2,17,1,0,0,0,4,47,
		1,0,0,0,6,7,3,2,1,0,7,8,5,0,0,1,8,1,1,0,0,0,9,10,6,1,-1,0,10,11,5,4,0,
		0,11,18,3,2,1,3,12,18,5,2,0,0,13,14,5,8,0,0,14,15,3,2,1,0,15,16,5,9,0,
		0,16,18,1,0,0,0,17,9,1,0,0,0,17,12,1,0,0,0,17,13,1,0,0,0,18,36,1,0,0,0,
		19,20,10,8,0,0,20,21,5,3,0,0,21,35,3,2,1,9,22,23,10,7,0,0,23,24,5,4,0,
		0,24,35,3,2,1,8,25,26,10,6,0,0,26,27,5,5,0,0,27,35,3,2,1,7,28,29,10,5,
		0,0,29,30,5,6,0,0,30,35,3,2,1,6,31,32,10,4,0,0,32,33,5,7,0,0,33,35,3,4,
		2,0,34,19,1,0,0,0,34,22,1,0,0,0,34,25,1,0,0,0,34,28,1,0,0,0,34,31,1,0,
		0,0,35,38,1,0,0,0,36,34,1,0,0,0,36,37,1,0,0,0,37,3,1,0,0,0,38,36,1,0,0,
		0,39,40,6,2,-1,0,40,41,5,4,0,0,41,48,3,4,2,3,42,48,5,2,0,0,43,44,5,8,0,
		0,44,45,3,4,2,0,45,46,5,9,0,0,46,48,1,0,0,0,47,39,1,0,0,0,47,42,1,0,0,
		0,47,43,1,0,0,0,48,63,1,0,0,0,49,50,10,7,0,0,50,51,5,3,0,0,51,62,3,4,2,
		8,52,53,10,6,0,0,53,54,5,4,0,0,54,62,3,4,2,7,55,56,10,5,0,0,56,57,5,5,
		0,0,57,62,3,4,2,6,58,59,10,4,0,0,59,60,5,6,0,0,60,62,3,4,2,5,61,49,1,0,
		0,0,61,52,1,0,0,0,61,55,1,0,0,0,61,58,1,0,0,0,62,65,1,0,0,0,63,61,1,0,
		0,0,63,64,1,0,0,0,64,5,1,0,0,0,65,63,1,0,0,0,6,17,34,36,47,61,63
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
